import { SwissComponent } from '@swissjs/core';
import type { ComponentNode, CapabilityConflict } from '../services/DataService.js';

interface NodeDetailsProps {
  node: ComponentNode;
  conflicts: CapabilityConflict[];
}

export default class NodeDetails extends SwissComponent<NodeDetailsProps> {
  constructor(props: NodeDetailsProps) {
    super(props);
  }

  isConflict = (capability: string): boolean => {
    return this.props.conflicts.some(c => c.capability === capability);
  };

  render() {
    return (
      <div className="node-details">
        <div className="node-header">
          <h3>{this.props.node.name}</h3>
          <span className="node-id">ID: {this.props.node.id}</span>
        </div>

        <div className="section">
          <h4>Hierarchy</h4>
          <div className="hierarchy-info">
            <div className="info-row">
              <span className="label">Parent:</span>
              <span className="value">{this.props.node.parentId ? this.props.node.parentId : 'Root'}</span>
            </div>
          </div>
        </div>

        <div className="section">
          <h4>Capabilities Provided ({this.props.node.provides.length})</h4>
          {this.props.node.provides.length > 0 ? (
            <div className="capability-list">
              {this.props.node.provides.map(cap => (
                <div key={cap} className="capability-item provides">
                  <span className="capability-name">{cap}</span>
                </div>
              ))}
            </div>
          ) : (
            <div className="empty-state">No capabilities provided</div>
          )}
        </div>

        <div className="section">
          <h4>Capabilities Consumed ({this.props.node.consumes.length})</h4>
          {this.props.node.consumes.length > 0 ? (
            <div className="capability-list">
              {this.props.node.consumes.map(cap => (
                <div key={cap} className={`capability-item consumes ${this.isConflict(cap) ? 'conflict' : ''}`}>
                  <span className="capability-name">{cap}</span>
                  {this.isConflict(cap) && (
                    <span className="conflict-indicator">⚠️ Not available</span>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <div className="empty-state">No capabilities consumed</div>
          )}
        </div>

        {this.props.conflicts.length > 0 && (
          <div className="section conflicts">
            <h4>Conflicts ({this.props.conflicts.length})</h4>
            <div className="conflict-list">
              {this.props.conflicts.map(conflict => (
                <div key={conflict.capability} className="conflict-item">
                  <span className="conflict-capability">{conflict.capability}</span>
                  <span className="conflict-reason">{conflict.reason}</span>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    );
  }

  private getStyles(): string {
    return html`
      <style>
        .node-details {
          font-size: 0.9rem;
        }

        .node-header {
          margin-bottom: 1.5rem;
          padding-bottom: 0.5rem;
          border-bottom: 1px solid #eee;
        }

        .node-header h3 {
          margin: 0 0 0.5rem 0;
          color: #333;
        }

        .node-id {
          font-family: monospace;
          font-size: 0.8rem;
          color: #666;
        }
      </style>
    `;
  }
}

